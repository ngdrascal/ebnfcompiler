%TOKENS%
   "let"             = "Let"
   "identifier"      = "Identifier"
   "number"          = "Number"
   "string"          = "String"
   "print"           = "Print"
   "printLine"       = "PrintLine"
   "number-literal"  = "NumberLiteral"
   "string-literal"  = "StringLiteral"
   ";"               = "Semicolon"
   ":"               = "Colon"
   ","               = "Comma"
   "="               = "Assign"
   "("               = "LeftParen"
   ")"               = "RightParen"
   "+"               = "Plus"
   "-"               = "Minus"
   "*"               = "Asterisk"
   "/"               = "ForwardSlash"

%EBNF%
   <statement-list> ::= <statement> #StmtEnd# ";" { <statement> #StmtEnd# ";" } .

   <statement> ::= <var-declaration> | <print-stmt> .

   <var-declaration> ::= #VarStmtStart# "let" #VarStmtIdent# "identifier" ":" #VarStmtType# <type> "=" <expression> #VarStmtEnd# .

   <type> ::= "number" | "string" .

   <expression> ::= <sign> <term> #UnaryOpEnd# { #BinaryOp# <add-operator> <term> #BinaryOpEnd# } |
                           <term> { #BinaryOp# <add-operator> <term> #BinaryOpEnd# } .

   <term> ::= <factor> { #BinaryOp# <mult-operator> <factor> #BinaryOpEnd# } .

   <factor> ::= "(" <expression> ")" | ( #FactIdent# "identifier" ) | <constant-literal> .

   <sign> ::= #UnaryOp# "+" | "-" .

   <add-operator> ::= "+" | "-" .

   <mult-operator> ::= "*" | "/" .

   <constant-literal> ::= ( #NumLiteral# "number-literal" ) | ( #StrLiteral# "string-literal" ) .

   <print-stmt> ::= #PrintStart# "print" "(" <expr-list> ")" .

   <expr-list> ::= <expression> #PrintExprEnd# { "," <expression> #PrintExprEnd# } .
